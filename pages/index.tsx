import { QuickContainer } from "../components/QuickContainer"
import { QuickInbox, QuickStart, QuickTask } from "../components/QuickTabs"
import { ContainerContext, InboxContext, QuickLauncherState } from "../context"
import Head from "next/head"
import { useState } from "react"

export default function Home() {
  const [containerState, setContainerState] =
    useState<QuickLauncherState>("initial")
  const [activeChatId, setActiveChatId] = useState<string | null>(null)
  const removeActiveChatId = () => setActiveChatId(null)

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ContainerContext.Provider value={{ containerState, setContainerState }}>
        <InboxContext.Provider
          value={{ activeChatId, setActiveChatId, removeActiveChatId }}
        >
          <div className="fixed right-8 bottom-8 h-quick-start w-quick-start">
            <QuickContainer state={containerState}>this i</QuickContainer>

            <QuickStart
              onClick={() => {
                setContainerState((prev) =>
                  prev === "initial" ? "expanded" : "initial"
                )
              }}
              hidden={
                !(containerState === "initial" || containerState === "expanded")
              }
            />

            <QuickInbox
              onClick={() => {
                setContainerState("inbox")
              }}
              onClose={() => {
                setContainerState("initial")
              }}
              state={containerState}
            />

            <QuickTask
              onClick={() => {
                setContainerState("task")
              }}
              onClose={() => {
                setContainerState("initial")
              }}
              state={containerState}
            />
          </div>
        </InboxContext.Provider>
      </ContainerContext.Provider>
    </>
  )
}
